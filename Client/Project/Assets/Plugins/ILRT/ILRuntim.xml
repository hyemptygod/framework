<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILRuntime</name>
    </assembly>
    <members>
        <member name="T:ILRuntime.Other.DelegateExportAttribute">
            <summary>
            A Delegate Custom Attr, It tells the CodeGenerationTools : this delegate need to register a delegate convertor,when generate ILRuntimeHelper.cs file.
            </summary>
        </member>
        <member name="T:ILRuntime.Other.NeedAdaptorAttribute">
            <summary>
            A Class Custom Attr, It tells the CodeGenerationTools :there is a class need to generate an adaptor for ILScript
            </summary>
        </member>
        <member name="T:ILRuntime.Other.ThreadSafeDictionary`2">
            <summary>
            A thread safe dictionary for internal use
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
        </member>
        <member name="T:ILRuntime.Other.UncheckedList`1">
            <summary>
            This is a copy of the latest .NET framework 4.5 List implementation, with all extraneous checking removed.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ILRuntime.Runtime.Debugger.DebugService.StartDebugService(System.Int32)">
            <summary>
            Start Debugger Server
            </summary>
            <param name="port">Port to listen on</param>
        </member>
        <member name="M:ILRuntime.Runtime.Debugger.DebugService.StopDebugService">
            <summary>
            Stop Debugger Server
            </summary>
        </member>
        <member name="M:ILRuntime.Runtime.Debugger.DebugService.Break(ILRuntime.Runtime.Intepreter.ILIntepreter,System.Exception)">
            <summary>
            中断运行
            </summary>
            <param name="intpreter"></param>
            <param name="ex"></param>
            <returns>如果挂的有调试器则返回true</returns>
        </member>
        <member name="P:ILRuntime.Runtime.Debugger.DebuggerServer.Port">
            <summary>
            服务器监听的端口
            </summary>
        </member>
        <member name="P:ILRuntime.Runtime.Enviorment.AppDomain.AllowUnboundCLRMethod">
            <summary>
            Determine if invoking unbinded CLR method(using reflection) is allowed
            </summary>
        </member>
        <member name="P:ILRuntime.Runtime.Enviorment.AppDomain.LoadedTypes">
            <summary>
            Attention, this property isn't thread safe
            </summary>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssemblyFile(System.String)">
            <summary>
            加载Assembly 文件，从指定的路径
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssemblyFileAndSymbol(System.String)">
            <summary>
            加载Assembly 文件和PDB文件或MDB文件，从指定的路径（PDB和MDB文件按默认命名方式，并且和Assembly文件处于同一目录中
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssemblyFileAndPDB(System.String,System.String)">
            <summary>
            加载Assembly 文件和PDB文件，两者都从指定的路径
            </summary>
            <param name="assemblyFilePath">Assembly 文件路径</param>
            <param name="symbolFilePath">symbol文件路径</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssemblyPDB(System.IO.Stream,System.IO.Stream)">
            <summary>
             从流加载Assembly,以及symbol符号文件(pdb)
            </summary>
            <param name="stream">Assembly Stream</param>
            <param name="symbol">PDB Stream</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssemblyFileAndMDB(System.String,System.String)">
            <summary>
            加载Assembly 文件和MDB文件，两者都从指定的路径
            </summary>
            <param name="assemblyFilePath">Assembly 文件路径</param>
            <param name="symbolFilePath">symbol文件路径</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssemblyMDB(System.IO.Stream,System.IO.Stream)">
            <summary>
             从流加载Assembly,以及symbol符号文件(Mdb)
            </summary>
            <param name="stream">Assembly Stream</param>
            <param name="symbol">PDB Stream</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssembly(System.IO.Stream)">
            <summary>
            从流加载Assembly 不加载symbol符号文件
            </summary>
            <param name="stream">Dll数据流</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.LoadAssembly(System.IO.Stream,System.IO.Stream,ILRuntime.Mono.Cecil.Cil.ISymbolReaderProvider)">
            <summary>
            从流加载Assembly,以及symbol符号文件(pdb)
            </summary>
            <param name="stream">Assembly Stream</param>
            <param name="symbol">symbol Stream</param>
            <param name="symbolReader">symbol 读取器</param>
            <param name="inMemory">是否完整读入内存</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.AddReferenceBytes(System.String,System.Byte[])">
            <summary>
            External reference should be added to the AppDomain by the method
            </summary>
            <param name="name">Assembly name, without .dll</param>
            <param name="content">file content</param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.GetType(System.String)">
            <summary>
            更近类型名称返回类型
            </summary>
            <param name="fullname">类型全名 命名空间.类型名</param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.GetType(System.Type)">
            <summary>
            根据CLR类型获取 IL类型
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.Instantiate``1(System.String,System.Object[])">
            <summary>
            Create a instance of the specified type, which is inherited from a CLR Type
            </summary>
            <typeparam name="T">CLR Type</typeparam>
            <param name="type">Full Name of the type</param>
            <param name="args">Arguments for the constructor</param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.Instantiate(System.String,System.Object[])">
            <summary>
            Create a instance of the specified type
            </summary>
            <param name="type">Full Name of the type</param>
            <param name="args">Arguments for the constructor</param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.Prewarm(System.String)">
            <summary>
            Prewarm all methods of the specified type
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.Invoke(System.String,System.String,System.Object,System.Object[])">
            <summary>
            Invoke a method
            </summary>
            <param name="type">Type's fullname</param>
            <param name="method">Method name</param>
            <param name="p">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.InvokeGenericMethod(System.String,System.String,ILRuntime.CLR.TypeSystem.IType[],System.Object,System.Object[])">
            <summary>
            Invoke a generic method
            </summary>
            <param name="type">Type's fullname</param>
            <param name="method">Method name</param>
            <param name="genericArguments">Generic Arguments</param>
            <param name="instance">Object Instance of the method</param>
            <param name="p">Parameters</param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.Runtime.Enviorment.AppDomain.Invoke(ILRuntime.CLR.Method.IMethod,System.Object,System.Object[])">
            <summary>
            Invokes a specific method
            </summary>
            <param name="m">Method</param>
            <param name="instance">object instance</param>
            <param name="p">Parameters</param>
            <returns></returns>
        </member>
        <member name="T:ILRuntime.Runtime.Enviorment.CrossBindingAdaptor">
            <summary>
            This interface is used for inheritance and implementation of CLR Types or interfaces
            </summary>
        </member>
        <member name="P:ILRuntime.Runtime.Enviorment.CrossBindingAdaptor.BaseCLRType">
            <summary>
            This returns the CLR type to be inherited or CLR interface to be implemented
            </summary>
        </member>
        <member name="P:ILRuntime.Runtime.Enviorment.CrossBindingAdaptor.BaseCLRTypes">
            <summary>
            If this Adaptor is capable to impelement multuple interfaces, use this Property, AND BaseCLRType should return null
            </summary>
        </member>
        <member name="P:ILRuntime.Runtime.Intepreter.ILTypeInstance.Boxed">
            <summary>
            是否已装箱
            </summary>
        </member>
        <member name="T:ILRuntime.Runtime.Intepreter.OpCodes.OpCode">
            <summary>
            IL指令
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCode.Code">
            <summary>
            当前指令
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCode.TokenInteger">
            <summary>
             Int32 操作数
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCode.TokenLong">
            <summary>
            Int64 操作数
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Nop">
            <summary>
            如果修补操作码，则填充空间。尽管可能消耗处理周期，但未执行任何有意义的操作。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Break">
            <summary>
            向公共语言结构 (CLI) 发出信号以通知调试器已撞上了一个断点。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarg_0">
            <summary>
            将索引为 0 的参数加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarg_1">
            <summary>
            将索引为 1 的参数加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarg_2">
            <summary>
            将索引为 2 的参数加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarg_3">
            <summary>
            将索引为 3 的参数加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloc_0">
            <summary>
            将索引 0 处的局部变量加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloc_1">
            <summary>
            将索引 1 处的局部变量加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloc_2">
            <summary>
            将索引 2 处的局部变量加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloc_3">
            <summary>
            将索引 3 处的局部变量加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stloc_0">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 0 处的局部变量列表中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stloc_1">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 1 处的局部变量列表中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stloc_2">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 2 处的局部变量列表中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stloc_3">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到索引 3 处的局部变量列表中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarg_S">
            <summary>
            将参数（由指定的短格式索引引用）加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarga_S">
            <summary>
            以短格式将参数地址加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Starg_S">
            <summary>
            将位于计算堆栈顶部的值存储在参数槽中的指定索引处（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloc_S">
            <summary>
            将特定索引处的局部变量加载到计算堆栈上（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloca_S">
            <summary>
            将位于特定索引处的局部变量的地址加载到计算堆栈上（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stloc_S">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储在局部变量列表中的 index 处（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldnull">
            <summary>
            将空引用（O 类型）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_M1">
            <summary>
            将整数值 -1 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_0">
            <summary>
            将整数值 0 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_1">
            <summary>
            将整数值 1 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_2">
            <summary>
            将整数值 2 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_3">
            <summary>
            将整数值 3 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_4">
            <summary>
            将整数值 4 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_5">
            <summary>
            将整数值 5 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_6">
            <summary>
            将整数值 6 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_7">
            <summary>
            将整数值 7 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_8">
            <summary>
            将整数值 8 作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4_S">
            <summary>
            将提供的 int8 值作为 int32 推送到计算堆栈上（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I4">
            <summary>
            将所提供的 int32 类型的值作为 int32 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_I8">
            <summary>
            将所提供的 int64 类型的值作为 int64 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_R4">
            <summary>
            将所提供的 float32 类型的值作为 F (float) 类型推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldc_R8">
            <summary>
            将所提供的 float64 类型的值作为 F (float) 类型推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Dup">
            <summary>
            复制计算堆栈上当前最顶端的值，然后将副本推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Pop">
            <summary>
            移除当前位于计算堆栈顶部的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Jmp">
            <summary>
            退出当前方法并跳至指定方法。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Call">
            <summary>
            调用由传递的方法说明符指示的方法。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Calli">
            <summary>
            通过调用约定描述的参数调用在计算堆栈上指示的方法（作为指向入口点的指针）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ret">
            <summary>
            从当前方法返回，并将返回值（如果存在）从调用方的计算堆栈推送到被调用方的计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Br_S">
            <summary>
            无条件地将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Brfalse_S">
            <summary>
            如果 value 为 false、空引用或零，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Brtrue_S">
            <summary>
            如果 value 为 true、非空或非零，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Beq_S">
            <summary>
            如果两个值相等，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bge_S">
            <summary>
            如果第一个值大于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bgt_S">
            <summary>
            如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ble_S">
            <summary>
            如果第一个值小于或等于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Blt_S">
            <summary>
            如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bne_Un_S">
            <summary>
            当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bge_Un_S">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bgt_Un_S">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ble_Un_S">
            <summary>
            当比较无符号整数值或不可排序的浮点值时，如果第一个值小于或等于第二个值，则将控制权转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Blt_Un_S">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令（短格式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Br">
            <summary>
            无条件地将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Brfalse">
            <summary>
            如果 value 为 false、空引用（Visual Basic 中的 Nothing）或零，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Brtrue">
            <summary>
            如果 value 为 true、非空或非零，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Beq">
            <summary>
            如果两个值相等，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bge">
            <summary>
            如果第一个值大于或等于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bgt">
            <summary>
            如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ble">
            <summary>
            如果第一个值小于或等于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Blt">
            <summary>
            如果第一个值小于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bne_Un">
            <summary>
            当两个无符号整数值或不可排序的浮点型值不相等时，将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bge_Un">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Bgt_Un">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值大于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ble_Un">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于或等于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Blt_Un">
            <summary>
            当比较无符号整数值或不可排序的浮点型值时，如果第一个值小于第二个值，则将控制转移到目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Switch">
            <summary>
            实现跳转表。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_I1">
            <summary>
            将 int8 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_U1">
            <summary>
            将 unsigned int8 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_I2">
            <summary>
            将 int16 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_U2">
            <summary>
            将 unsigned int16 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_I4">
            <summary>
            将 int32 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_U4">
            <summary>
            将 unsigned int32 类型的值作为 int32 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_I8">
            <summary>
            将 int64 类型的值作为 int64 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_I">
            <summary>
            将 native int 类型的值作为 native int 间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_R4">
            <summary>
            将 float32 类型的值作为 F (float) 类型间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_R8">
            <summary>
            将 float64 类型的值作为 F (float) 类型间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldind_Ref">
            <summary>
            将对象引用作为 O（对象引用）类型间接加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_Ref">
            <summary>
            存储所提供地址处的对象引用值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_I1">
            <summary>
            在所提供的地址存储 int8 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_I2">
            <summary>
            在所提供的地址存储 int16 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_I4">
            <summary>
            在所提供的地址存储 int32 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_I8">
            <summary>
            在所提供的地址存储 int64 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_R4">
            <summary>
            在所提供的地址存储 float32 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_R8">
            <summary>
            在所提供的地址存储 float64 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Add">
            <summary>
            将两个值相加并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Sub">
            <summary>
            从其他值中减去一个值并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Mul">
            <summary>
            将两个值相乘并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Div">
            <summary>
            将两个值相除并将结果作为浮点（F 类型）或商（int32 类型）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Div_Un">
            <summary>
            两个无符号整数值相除并将结果 ( int32 ) 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Rem">
            <summary>
            将两个值相除并将余数推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Rem_Un">
            <summary>
            将两个无符号值相除并将余数推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.And">
            <summary>
            计算两个值的按位“与”并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Or">
            <summary>
            计算位于堆栈顶部的两个整数值的按位求补并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Xor">
            <summary>
            计算位于计算堆栈顶部的两个值的按位异或，并且将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Shl">
            <summary>
            将整数值左移（用零填充）指定的位数，并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Shr">
            <summary>
            将整数值右移（保留符号）指定的位数，并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Shr_Un">
            <summary>
            将无符号整数值右移（用零填充）指定的位数，并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Neg">
            <summary>
            对一个值执行求反并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Not">
            <summary>
            计算堆栈顶部整数值的按位求补并将结果作为相同的类型推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_I1">
            <summary>
            将位于计算堆栈顶部的值转换为 int8，然后将其扩展（填充）为 int32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_I2">
            <summary>
            将位于计算堆栈顶部的值转换为 int16，然后将其扩展（填充）为 int32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_I4">
            <summary>
            将位于计算堆栈顶部的值转换为 int32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_I8">
            <summary>
            将位于计算堆栈顶部的值转换为 int64。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_R4">
            <summary>
            将位于计算堆栈顶部的值转换为 float32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_R8">
            <summary>
            将位于计算堆栈顶部的值转换为 float64。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_U4">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int32，然后将其扩展为 int32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_U8">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int64，然后将其扩展为 int64。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Callvirt">
            <summary>
            对对象调用后期绑定方法，并且将返回值推送到计算堆栈上。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Cpobj" -->
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldobj">
            <summary>
            将地址指向的值类型对象复制到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldstr">
            <summary>
            推送对元数据中存储的字符串的新对象引用。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Newobj">
            <summary>
            创建一个值类型的新对象或新实例，并将对象引用（O 类型）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Castclass">
            <summary>
            尝试将引用传递的对象转换为指定的类。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Isinst">
            <summary>
            测试对象引用（O 类型）是否为特定类的实例。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_R_Un">
            <summary>
            将位于计算堆栈顶部的无符号整数值转换为 float32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Unbox">
            <summary>
            将值类型的已装箱的表示形式转换为其未装箱的形式。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Throw">
            <summary>
            引发当前位于计算堆栈上的异常对象。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldfld">
            <summary>
            查找对象中其引用当前位于计算堆栈的字段的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldflda">
            <summary>
            查找对象中其引用当前位于计算堆栈的字段的地址。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stfld">
            <summary>
            用新值替换在对象引用或指针的字段中存储的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldsfld">
            <summary>
            将静态字段的值推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldsflda">
            <summary>
            将静态字段的地址推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stsfld">
            <summary>
            用来自计算堆栈的值替换静态字段的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stobj">
            <summary>
            将指定类型的值从计算堆栈复制到所提供的内存地址中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I1_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int8 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I2_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int16 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I4_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I8_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 int64，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U1_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int8 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U2_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int16 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U4_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U8_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned int64，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为有符号 native int，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U_Un">
            <summary>
            将位于计算堆栈顶部的无符号值转换为 unsigned native int，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Box">
            <summary>
            将值类转换为对象引用（O 类型）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Newarr">
            <summary>
            将对新的从零开始的一维数组（其元素属于特定类型）的对象引用推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldlen">
            <summary>
            将从零开始的、一维数组的元素的数目推送到计算堆栈上。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelema" -->
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_I1">
            <summary>
            将位于指定数组索引处的 int8 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_U1">
            <summary>
            将位于指定数组索引处的 unsigned int8 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_I2">
            <summary>
            将位于指定数组索引处的 int16 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_U2">
            <summary>
            将位于指定数组索引处的 unsigned int16 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_I4">
            <summary>
            将位于指定数组索引处的 int32 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_U4">
            <summary>
            将位于指定数组索引处的 unsigned int32 类型的元素作为 int32 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_I8">
            <summary>
            将位于指定数组索引处的 int64 类型的元素作为 int64 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_I">
            <summary>
            将位于指定数组索引处的 native int 类型的元素作为 native int 加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_R4">
            <summary>
            将位于指定数组索引处的 float32 类型的元素作为 F 类型（浮点型）加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_R8">
            <summary>
            将位于指定数组索引处的 float64 类型的元素作为 F 类型（浮点型）加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_Ref">
            <summary>
            将位于指定数组索引处的包含对象引用的元素作为 O 类型（对象引用）加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_I">
            <summary>
            用计算堆栈上的 native int 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_I1">
            <summary>
            用计算堆栈上的 int8 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_I2">
            <summary>
            用计算堆栈上的 int16 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_I4">
            <summary>
            用计算堆栈上的 int32 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_I8">
            <summary>
            用计算堆栈上的 int64 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_R4">
            <summary>
            用计算堆栈上的 float32 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_R8">
            <summary>
            用计算堆栈上的 float64 值替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_Ref">
            <summary>
            用计算堆栈上的对象 ref 值（O 类型）替换给定索引处的数组元素。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldelem_Any">
            <summary>
            按照指令中指定的类型，将指定数组索引中的元素加载到计算堆栈的顶部。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stelem_Any">
            <summary>
            用计算堆栈中的值替换给定索引处的数组元素，其类型在指令中指定。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Unbox_Any">
            <summary>
            将指令中指定类型的已装箱的表示形式转换成未装箱形式。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I1">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int8 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U1">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int8 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I2">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int16 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U2">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int16 并将其扩展为 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I4">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U4">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int32，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I8">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 int64，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U8">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned int64，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Refanyval" -->
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ckfinite">
            <summary>
            如果值不是有限数，则引发 ArithmeticException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Mkrefany">
            <summary>
            将对特定类型实例的类型化引用推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldtoken">
            <summary>
            将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_U2">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int16，然后将其扩展为 int32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_U1">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned int8，然后将其扩展为 int32。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_I">
            <summary>
            将位于计算堆栈顶部的值转换为 native int。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_I">
            <summary>
            将位于计算堆栈顶部的有符号值转换为有符号 native int，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_Ovf_U">
            <summary>
            将位于计算堆栈顶部的有符号值转换为 unsigned native int，并在溢出时引发 OverflowException。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Add_Ovf">
            <summary>
            将两个整数相加，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Add_Ovf_Un">
            <summary>
            将两个无符号整数值相加，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Mul_Ovf">
            <summary>
            将两个整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Mul_Ovf_Un">
            <summary>
            将两个无符号整数值相乘，执行溢出检查，并将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Sub_Ovf">
            <summary>
            从另一值中减去一个整数值，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Sub_Ovf_Un">
            <summary>
            从另一值中减去一个无符号整数值，执行溢出检查，并且将结果推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Endfinally">
            <summary>
            将控制从异常块的 fault 或 finally 子句转移回公共语言结构 (CLI) 异常处理程序。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Leave">
            <summary>
            退出受保护的代码区域，无条件将控制转移到特定目标指令。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Leave_S">
            <summary>
            退出受保护的代码区域，无条件将控制转移到目标指令（缩写形式）。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stind_I">
            <summary>
            在所提供的地址存储 native int 类型的值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Conv_U">
            <summary>
            将位于计算堆栈顶部的值转换为 unsigned native int，然后将其扩展为 native int。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Arglist">
            <summary>
            返回指向当前方法的参数列表的非托管指针。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ceq">
            <summary>
            比较两个值。如果这两个值相等，则将整数值 1 (int32) 推送到计算堆栈上；否则，将 0 (int32) 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Cgt">
            <summary>
            比较两个值。如果第一个值大于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Cgt_Un">
            <summary>
            比较两个无符号的或不可排序的值。如果第一个值大于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Clt">
            <summary>
            比较两个值。如果第一个值小于第二个值，则将整数值 1 (int32) 推送到计算堆栈上；反之，将 0 (int32) 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Clt_Un">
            <summary>
            比较无符号的或不可排序的值 value1 和 value2。如果 value1 小于 value2，则将整数值 1 (int32 ) 推送到计算堆栈上；反之，将 0 ( int32 ) 推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldftn">
            <summary>
            将指向实现特定方法的本机代码的非托管指针（native int 类型）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldvirtftn">
            <summary>
            将指向实现与指定对象关联的特定虚方法的本机代码的非托管指针（native int 类型）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarg">
            <summary>
            将参数（由指定索引值引用）加载到堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldarga">
            <summary>
            将参数地址加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Starg">
            <summary>
            将位于计算堆栈顶部的值存储到位于指定索引的参数槽中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloc">
            <summary>
            将指定索引处的局部变量加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Ldloca">
            <summary>
            将位于特定索引处的局部变量的地址加载到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Stloc">
            <summary>
            从计算堆栈的顶部弹出当前值并将其存储到指定索引处的局部变量列表中。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Localloc">
            <summary>
            从本地动态内存池分配特定数目的字节并将第一个分配的字节的地址（瞬态指针，* 类型）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Endfilter">
            <summary>
            将控制从异常的 filter 子句转移回公共语言结构 (CLI) 异常处理程序。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Unaligned">
            <summary>
            指示当前位于计算堆栈上的地址可能没有与紧接的 ldind、stind、ldfld、stfld、ldobj、stobj、initblk 或 cpblk 指令的自然大小对齐。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Volatile">
            <summary>
            指定当前位于计算堆栈顶部的地址可以是易失的，并且读取该位置的结果不能被缓存，或者对该地址的多个存储区不能被取消。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Tail">
            <summary>
            执行后缀的方法调用指令，以便在执行实际调用指令前移除当前方法的堆栈帧。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Initobj">
            <summary>
            将位于指定地址的值类型的每个字段初始化为空引用或适当的基元类型的 0。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Constrained">
            <summary>
            约束要对其进行虚方法调用的类型。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Cpblk">
            <summary>
            将指定数目的字节从源地址复制到目标地址。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Initblk">
            <summary>
            将位于特定地址的内存的指定块初始化为给定大小和初始值。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Rethrow">
            <summary>
            再次引发当前异常。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Sizeof">
            <summary>
            将提供的值类型的大小（以字节为单位）推送到计算堆栈上。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Refanytype">
            <summary>
            检索嵌入在类型化引用内的类型标记。
            </summary>
        </member>
        <member name="F:ILRuntime.Runtime.Intepreter.OpCodes.OpCodeEnum.Readonly">
            <summary>
            指定后面的数组地址操作在运行时不执行类型检查，并且返回可变性受限的托管指针。
            </summary>
        </member>
        <member name="M:ILRuntime.CLR.TypeSystem.ILType.#ctor(ILRuntime.Mono.Cecil.TypeReference,ILRuntime.Runtime.Enviorment.AppDomain)">
            <summary>
            初始化IL类型
            </summary>
            <param name="def">MONO返回的类型定义</param>
            <param name="domain">ILdomain</param>
        </member>
        <member name="M:ILRuntime.CLR.TypeSystem.ILType.RetriveDefinitino(ILRuntime.Mono.Cecil.TypeReference)">
            <summary>
            加载类型
            </summary>
            <param name="def"></param>
        </member>
        <member name="M:ILRuntime.CLR.TypeSystem.IType.GetMethod(System.String,System.Int32,System.Boolean)">
            <summary>
            Get a specified Method in this type
            </summary>
            <param name="name">Name of the Type</param>
            <param name="paramCount">Parameter count</param>
            <param name="declaredOnly">True to search the methods decleared in this type only, false to search base types.</param>
            <returns></returns>
        </member>
        <member name="M:ILRuntime.CLR.TypeSystem.IType.GetMethod(System.String,System.Collections.Generic.List{ILRuntime.CLR.TypeSystem.IType},ILRuntime.CLR.TypeSystem.IType[],ILRuntime.CLR.TypeSystem.IType,System.Boolean)">
            <summary>
             Get a specified Method in this type
            </summary>
            <param name="name">Name of the Type</param>
            <param name="param">List of parameter's types</param>
            <param name="genericArguments">List of Generic Arguments</param>
            <param name="returnType">Return Type</param>
            <param name="declaredOnly">True to search the methods decleared in this type only, false to search base types.</param>
            <returns></returns>
        </member>
    </members>
</doc>
